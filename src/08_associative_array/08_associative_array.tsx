// import React from 'react';
//
// const user = {
//     name: 'Lena',
//     age: 32,
//     lessons: [{title: '1'}, {title: '2'}, {title: '3'}],
//     adress: {
//         street: {
//             title: 'Nizhegorodskaya street'
//         }
//     }
// }
//
// user.adress.street.title // это дотнатейшн обращаемся когда все свойства нам известны
// user["adress"]["street"]["title"] // это обращение когда ключи задаются ДИНАМИЧЕСКИ
//
//
// export const usersArray = ['Dimych', 'Natasha', 'Valera', 'Katya']
// usersArray["map"]((n=>n.toUpperCase()); // вместо "мар" можно динамически задать другой метод
//
//
// const userObj = {
//     "0":"Lena",
//     "1":"Lena1",
//     "2":"Lena2",
//     "3":"Lena3",
// }
// userObj["1"] // "Lena1"
// userObj["table"]="brown"  // добавится еще один ключи "table": "brown"
//
// Object.keys(userObj)   // ["0","1","2","3","table"]  получим массив ключей и по нему можно итеррироваться МАРом
// Object.values(userObj)   // ["Lena",""Lena1","Lena2","Lena3","brown"]
//
// // НА СОБЕСАХ СПРАШИВАЮТ. всегда ключ преобразуется в строку!!!!! тоесть вызыы неявно метод туСтринг
// userObj[null] = "хорошо"  // получим новую пару ключ:значение  "null" : "хорошо"
// userObj[null] = "лала" // перезатрется "хорошо" на "лала" , будет "null" : "лала"
//
// userObj[{}] = "hello" // к {} вызовется метод {}.toString а от пустого он вернет ObjectObject и все равно  добавится новая пара "ObjectObject":"hello"
//
// userObj[{name:"Sasha", toString(){return "bla bla"}}] = "value" // получим пару "bla bla": "value":
//
// // ПРИМЕР РАЗЛИЧИЙ
// // ассоц массив
// // разница между ассов и обычынм массивами в том, с какой скоростью мы из них данные берем по ID. По матиматически функ O(1) о от одного, тоесть скорость извлечения данных всегда одинаковая и равна 1, хоть миллион ИД будет в объекте - это все про ассоц массив
// const students = {
//     "101":{id:101, name: "lena"},
//     "102":{id:102, name: "Sasha"},
//     "103":{id:103, name: "Anna"},
// }
// // добавл нового студента к ассоц массиву
// const newUser = {id:104, name: "Victor"}
// students[newUser.id] = newUser
//
// // удаление пользователя
// delete students[newUser.id]
//
// // обновитьб данные пользователя
// students[101"] = "Lena
//
// // обычный массив
// // мы проходим по массиву, перебирая все эл на пути и искать нужный. Это долго. По матаматич функ будет O(n) где n - кол-во эл в массиве
// // даже если для глаза этот перебор и проходит быстро, это все равно нагружает процессор и сажает батарею телефона!!!!!!
// const studentArr = [
//     {id:101, name: "lena"},
//     {id:102, name: "Sasha"},
//     {id:103, name: "Anna"}
// ]
// // добавл нового студента к обычн массиву
// [...studentArr, newStudent]
//
// // удаление пользователя - опять надо перебирать
// studentArr.filter(s => s.id !==id))
//
//
